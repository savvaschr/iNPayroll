' This Class has been autogenerated by Nodalsoft
' Do NOT adjust as it will be overwritten
' Generation Date : 02/11/07 3:31:31 PM
'
'
Public Class cFiTxAllocations
    '
    Inherits cFiTxAllocationsDbTier
    '
    Private mId As Integer
    Private mAccLineId As Integer
    Private mTrxHeaderId As Integer
    Private mPrdCode As Integer
    Private mAllocationDate As Date
    Private mCurAlphaCode As String
    Private mAllocationRate As Double
    Private mAllocationAmountLC As Double
    Private mAllocationAmountTC As Double
    Private mCreationDate As Date
    Private mAmendDate As Date
    Private mCreatedBy As Integer
    Private mAmendBy As Integer
    Public Property Id() As Integer
        Get
            Return mId
        End Get
        Set(ByVal Value As Integer)
            mId = Value
        End Set
    End Property
    Public Property AccLineId() As Integer
        Get
            Return mAccLineId
        End Get
        Set(ByVal Value As Integer)
            mAccLineId = Value
        End Set
    End Property
    Public Property TrxHeaderId() As Integer
        Get
            Return mTrxHeaderId
        End Get
        Set(ByVal Value As Integer)
            mTrxHeaderId = Value
        End Set
    End Property
    Public Property PrdCode() As Integer
        Get
            Return mPrdCode
        End Get
        Set(ByVal Value As Integer)
            mPrdCode = Value
        End Set
    End Property
    Public Property AllocationDate() As Date
        Get
            Return mAllocationDate
        End Get
        Set(ByVal Value As Date)
            mAllocationDate = Value
        End Set
    End Property
    Public Property CurAlphaCode() As String
        Get
            Return mCurAlphaCode
        End Get
        Set(ByVal Value As String)
            mCurAlphaCode = Value
        End Set
    End Property
    Public Property AllocationRate() As Double
        Get
            Return mAllocationRate
        End Get
        Set(ByVal Value As Double)
            mAllocationRate = Value
        End Set
    End Property
    Public Property AllocationAmountLC() As Double
        Get
            Return mAllocationAmountLC
        End Get
        Set(ByVal Value As Double)
            mAllocationAmountLC = Value
        End Set
    End Property
    Public Property AllocationAmountTC() As Double
        Get
            Return mAllocationAmountTC
        End Get
        Set(ByVal Value As Double)
            mAllocationAmountTC = Value
        End Set
    End Property
    Public Property CreationDate() As Date
        Get
            Return mCreationDate
        End Get
        Set(ByVal Value As Date)
            mCreationDate = Value
        End Set
    End Property
    Public Property AmendDate() As Date
        Get
            Return mAmendDate
        End Get
        Set(ByVal Value As Date)
            mAmendDate = Value
        End Set
    End Property
    Public Property CreatedBy() As Integer
        Get
            Return mCreatedBy
        End Get
        Set(ByVal Value As Integer)
            mCreatedBy = Value
        End Set
    End Property
    Public Property AmendBy() As Integer
        Get
            Return mAmendBy
        End Get
        Set(ByVal Value As Integer)
            mAmendBy = Value
        End Set
    End Property
    Public Sub New()
    End Sub
    Public Sub New(ByVal Dr As DataRow)
        If Not Dr Is Nothing Then
            LoadDataRow(Dr)
        End If
    End Sub
    Public Sub New(ByVal tId As Integer)
        If tId <> 0 Then
            Init(tId)
        End If
    End Sub
    Private Sub Init(ByVal tId As Integer)
        Try
            Dim ds As DataSet
            ds = MyBase.GetByPK(tId)
            If CheckDataSet(ds) Then
                LoadDataRow(ds.Tables(0).Rows(0))
            End If
        Catch ex As System.Exception
        End Try
    End Sub
    Private Sub LoadDataRow(ByVal dr As DataRow)
        mId = DbNullToInt(dr.item(0))
        mAccLineId = DbNullToInt(dr.item(1))
        mTrxHeaderId = DbNullToInt(dr.item(2))
        mPrdCode = DbNullToInt(dr.item(3))
        mAllocationDate = DbNullToDate(dr.item(4))
        mCurAlphaCode = DbNullToString(dr.item(5))
        mAllocationRate = DbNullToDouble(dr.item(6))
        mAllocationAmountLC = DbNullToDouble(dr.item(7))
        mAllocationAmountTC = DbNullToDouble(dr.item(8))
        mCreationDate = DbNullToDate(dr.item(9))
        mAmendDate = DbNullToDate(dr.item(10))
        mCreatedBy = DbNullToInt(dr.item(11))
        mAmendBy = DbNullToInt(dr.item(12))
    End Sub
    Public Shadows Function Delete(ByVal tId As Integer) As Boolean
        Try
            Dim Counter As Integer
            Dim TableCount As Integer
            Dim RecordCount As Integer
            Dim TransStr As String = ""
            Dim ds As DataSet
            ds = MyBase.CheckDeleteRecords(tId)
            If CheckDataSet(ds) Then
                For Counter = 0 To ds.Tables.Count - 1
                    TableCount = TableCount + 1
                    RecordCount = RecordCount + DbNullToInt(ds.Tables(Counter).Rows(0).Item(0))
                    TransStr = TransStr & vbCrLf & "Table " & TableCount & "  Records " & RecordCount
                Next Counter
                If RecordCount = 0 Then
                    Return MyBase.Delete(tId)
                Else
                    MsgBox("Transactions Exist For This item - Can not Delete" & TransStr, MsgBoxStyle.Critical)
                End If
            Else
                MsgBox("Failed to confirm that no records exist for this item - Can not Delete")
                Return False
            End If
        Catch ex As System.Exception
        End Try
    End Function
    Public Shadows Function Save() As Boolean
        Try
            Return MyBase.Save(Me)
        Catch ex As System.Exception
            Return False
        End Try
    End Function
End Class
