' This Class has been autogenerated by Nodalsoft
' Do NOT adjust as it will be overwritten
' Generation Date : 13/02/2008 09:42:46
'
'
Public Class cAdMsCurrencyRates
    '
    Inherits cAdMsCurrencyRatesDbTier
    '
    Private mCurRte_id As Integer
    Private mAlphaCode As String
    Private mRate As Double
    Private mEffectiveDate As Date
    Private mCreatedBy As Integer
    Private mCreationDate As Date
    Private mAmendBy As Integer
    Private mAmendDate As Date
    Public Property CurRte_id() As Integer
        Get
            Return mCurRte_id
        End Get
        Set(ByVal Value As Integer)
            mCurRte_id = Value
        End Set
    End Property
    Public Property AlphaCode() As String
        Get
            Return mAlphaCode
        End Get
        Set(ByVal Value As String)
            mAlphaCode = Value
        End Set
    End Property
    Public Property Rate() As Double
        Get
            Return mRate
        End Get
        Set(ByVal Value As Double)
            mRate = Value
        End Set
    End Property
    Public Property EffectiveDate() As Date
        Get
            Return mEffectiveDate
        End Get
        Set(ByVal Value As Date)
            mEffectiveDate = Value
        End Set
    End Property
    Public Property CreatedBy() As Integer
        Get
            Return mCreatedBy
        End Get
        Set(ByVal Value As Integer)
            mCreatedBy = Value
        End Set
    End Property
    Public Property CreationDate() As Date
        Get
            Return mCreationDate
        End Get
        Set(ByVal Value As Date)
            mCreationDate = Value
        End Set
    End Property
    Public Property AmendBy() As Integer
        Get
            Return mAmendBy
        End Get
        Set(ByVal Value As Integer)
            mAmendBy = Value
        End Set
    End Property
    Public Property AmendDate() As Date
        Get
            Return mAmendDate
        End Get
        Set(ByVal Value As Date)
            mAmendDate = Value
        End Set
    End Property
    Public Sub New()
    End Sub
    Public Sub New(ByVal Dr As DataRow)
        If Not Dr Is Nothing Then
            LoadDataRow(Dr)
        End If
    End Sub
    Public Sub New(ByVal tCurRte_id As Integer)
        If tCurRte_id <> 0 Then
            Init(tCurRte_id)
        End If
    End Sub
    Public Sub New(ByVal tCode As String, ByVal tEffectiveDate As Date)
        Try
            Dim ds As DataSet
            ds = MyBase.GetByCodeANDEffectiveDate(tCode, tEffectiveDate)
            If CheckDataSet(ds) Then
                LoadDataRow(ds.Tables(0).Rows(0))
            End If
        Catch ex As System.Exception

        End Try
    End Sub


    Private Sub Init(ByVal tCurRte_id As Integer)
        Try
            Dim ds As DataSet
            ds = MyBase.GetByPK(tCurRte_id)
            If CheckDataSet(ds) Then
                LoadDataRow(ds.Tables(0).Rows(0))
            End If
        Catch ex As System.Exception
        End Try
    End Sub
    Private Sub LoadDataRow(ByVal dr As DataRow)
        mCurRte_id = DbNullToInt(dr.Item(0))
        mAlphaCode = DbNullToString(dr.Item(1))
        mRate = DbNullToDouble(dr.Item(2))
        mEffectiveDate = DbNullToDate(dr.Item(3))
        mCreatedBy = DbNullToInt(dr.Item(4))
        mCreationDate = DbNullToDate(dr.Item(5))
        mAmendBy = DbNullToInt(dr.Item(6))
        mAmendDate = DbNullToDate(dr.Item(7))
    End Sub
    Public Shadows Function Delete(ByVal tCurRte_id As Integer) As Boolean
        Try
            Dim Counter As Integer
            Dim TableCount As Integer
            Dim RecordCount As Integer
            Dim TransStr As String = ""
            Dim ds As DataSet
            ds = MyBase.CheckDeleteRecords(tCurRte_id)
            If CheckDataSet(ds) Then
                For Counter = 0 To ds.Tables.Count - 1
                    TableCount = TableCount + 1
                    RecordCount = RecordCount + DbNullToInt(ds.Tables(Counter).Rows(0).Item(0))
                    TransStr = TransStr & vbCrLf & "Table " & TableCount & "  Records " & RecordCount
                Next Counter
                If RecordCount = 0 Then
                    Return MyBase.Delete(tCurRte_id)
                Else
                    MsgBox("Transactions Exist For This item - Can not Delete" & TransStr, MsgBoxStyle.Critical)
                End If
            ElseIf ds Is Nothing Then
                Return MyBase.Delete(tCurRte_id)
            Else
                MsgBox("Failed to confirm that no records exist for this item - Can not Delete")
                Return False
            End If
        Catch ex As System.Exception
        End Try
    End Function
    '
    Public Shadows Function Save() As Boolean
        Try
            Return MyBase.Save(Me)
        Catch ex As System.Exception
            Return False
        End Try
    End Function
End Class
