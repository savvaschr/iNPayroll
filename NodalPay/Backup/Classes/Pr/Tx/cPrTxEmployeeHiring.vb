' This Class has been autogenerated by Nodalsoft
' Do NOT adjust as it will be overwritten
' Generation Date : 13/02/2008 09:42:51
'
'
Public Class cPrTxEmployeeHiring
'
Inherits cPrTxEmployeeHiringDbTier
'
Private mId As Integer
Private mCode As String
Private mHiringDate As Date
Private mStartDate As Date
Private mStartSalary As Double
Private mPFStartDate As Date
Private mUsr_Id As Integer
Public Property Id() As Integer
    Get
       Return mId
    End Get
    Set(ByVal Value As Integer)
       mId = Value
    End Set
End Property
Public Property Code() As String
    Get
       Return mCode
    End Get
    Set(ByVal Value As String)
       mCode = Value
    End Set
End Property
Public Property HiringDate() As Date
    Get
       Return mHiringDate
    End Get
    Set(ByVal Value As Date)
       mHiringDate = Value
    End Set
End Property
Public Property StartDate() As Date
    Get
       Return mStartDate
    End Get
    Set(ByVal Value As Date)
       mStartDate = Value
    End Set
End Property
Public Property StartSalary() As Double
    Get
       Return mStartSalary
    End Get
    Set(ByVal Value As Double)
       mStartSalary = Value
    End Set
End Property
Public Property PFStartDate() As Date
    Get
       Return mPFStartDate
    End Get
    Set(ByVal Value As Date)
       mPFStartDate = Value
    End Set
End Property
Public Property Usr_Id() As Integer
    Get
       Return mUsr_Id
    End Get
    Set(ByVal Value As Integer)
       mUsr_Id = Value
    End Set
End Property
Public Sub New()
End Sub
Public Sub New(ByVal Dr as DataRow)
    If Not Dr Is Nothing Then
         LoadDataRow(Dr)
    End If
End Sub
Public Sub New(ByVal tId As Integer)
     IF tId <> 0 Then
        Init(tId)
      End If
End Sub
Private Sub Init(ByVal tId As Integer)
   Try
        Dim ds as DataSet
        ds = MyBase.GetByPK(tId)
        If CheckDataSet(ds) Then
           LoadDataRow(ds.Tables(0).Rows(0))
        End If
        Catch ex As System.Exception
   End Try
End Sub
Private Sub LoadDataRow(ByVal dr As DataRow)
     mId = DbNullToInt(dr.item(0))
     mCode = DbNullToString(dr.item(1))
     mHiringDate = DbNullToDate(dr.item(2))
     mStartDate = DbNullToDate(dr.item(3))
     mStartSalary = DbNullToDouble(dr.item(4))
     mPFStartDate = DbNullToDate(dr.item(5))
     mUsr_Id = DbNullToInt(dr.item(6))
End Sub
Public Shadows Function Delete(ByVal tId As Integer) As Boolean
Try
  Dim Counter As Integer
  Dim TableCount As Integer
  Dim RecordCount As Integer
  Dim TransStr As String = ""
  Dim ds As DataSet
  ds = MyBase.CheckDeleteRecords(tId)
  If CheckDataSet(ds) Then
     For Counter = 0 To ds.Tables.Count - 1
        TableCount = TableCount + 1
        RecordCount = RecordCount + DbNullToInt(ds.Tables(Counter).Rows(0).Item(0))
        TransStr = TransStr  &  vbCrLf & "Table " & TableCount & "  Records " & RecordCount
     Next Counter
     If RecordCount = 0 Then
         Return MyBase.Delete(tId)
     Else
        MsgBox("Transactions Exist For This item - Can not Delete" & TransStr, MsgBoxStyle.Critical)
     End If
  Else
     MsgBox("Failed to confirm that no records exist for this item - Can not Delete")
     Return False
  End If
Catch ex As System.Exception
End Try
End Function
'
Public Shadows Function Save() As Boolean
    Try
        Return MyBase.Save(Me)
    Catch ex As System.Exception
        Return False
    End Try
End Function
End Class
