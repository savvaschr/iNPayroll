' This Class has been autogenerated by Nodalsoft
' Do NOT adjust as it will be overwritten
' Generation Date : 19/05/2008 16:05:29
'
'
Public Class cPrTxTrxnLinesDbTier
    '
    Inherits cDataTier
    '
    Protected Function GetByPK(ByVal tTrxLin_Id As Integer, ByVal tTrxHdr_Id As Integer) As DataSet
        Dim Str As String
        Str = " SELECT" & _
                " TrxLin_Id," & _
                " TrxHdr_Id," & _
                " TrxLin_Type," & _
                " ErnCod_Code," & _
                " DedCod_Code," & _
                " ConCod_Code," & _
                " TrxLin_PeriodValue," & _
                " TrxLin_YTDValue," & _
                " TrxLin_EDC," & _
                " TrxLin_EDCDescription," & _
                " TrxLin_ConsolDesc " & _
            "  FROM PrTxTrxnLines" & _
            "  WHERE TrxLin_Id = " & tTrxLin_Id & " AND TrxHdr_Id = " & tTrxHdr_Id
        Return MyBase.GetData(Str)
    End Function
    Protected Function GetByERN(ByVal tHdrId As Integer, ByVal Earn As cPrMsTemplateEarnings) As DataSet
        Dim Str As String
        Str = " SELECT" & _
                " TrxLin_Id," & _
                " TrxHdr_Id," & _
                " TrxLin_Type," & _
                " ErnCod_Code," & _
                " DedCod_Code," & _
                " ConCod_Code," & _
                " TrxLin_PeriodValue," & _
                " TrxLin_YTDValue," & _
                " TrxLin_EDC," & _
                " TrxLin_EDCDescription," & _
                " TrxLin_ConsolDesc " & _
            "  FROM PrTxTrxnLines" & _
            "  WHERE TrxHdr_Id = " & tHdrId & _
            " AND ErnCod_Code=" & enQuoteString(Earn.ErnCodCode)
        Return MyBase.GetData(Str)
    End Function
    Protected Function GetByDED(ByVal tHdrId As Integer, ByVal DED As cPrMsTemplateDeductions) As DataSet
        Dim Str As String
        Str = " SELECT" & _
                " TrxLin_Id," & _
                " TrxHdr_Id," & _
                " TrxLin_Type," & _
                " ErnCod_Code," & _
                " DedCod_Code," & _
                " ConCod_Code," & _
                " TrxLin_PeriodValue," & _
                " TrxLin_YTDValue," & _
                " TrxLin_EDC," & _
                " TrxLin_EDCDescription," & _
                " TrxLin_ConsolDesc " & _
            "  FROM PrTxTrxnLines" & _
            "  WHERE TrxHdr_Id = " & tHdrId & _
            " AND DedCod_Code=" & enQuoteString(DED.DedCodCode)
        Return MyBase.GetData(Str)
    End Function
    Protected Function GetByCON(ByVal tHdrId As Integer, ByVal CON As cPrMsTemplateContributions) As DataSet
        Dim Str As String
        Str = " SELECT" & _
                " TrxLin_Id," & _
                " TrxHdr_Id," & _
                " TrxLin_Type," & _
                " ErnCod_Code," & _
                " DedCod_Code," & _
                " ConCod_Code," & _
                " TrxLin_PeriodValue," & _
                " TrxLin_YTDValue," & _
                " TrxLin_EDC," & _
                " TrxLin_EDCDescription," & _
                " TrxLin_ConsolDesc " & _
            "  FROM PrTxTrxnLines" & _
            "  WHERE TrxHdr_Id = " & tHdrId & _
            " AND ConCod_Code=" & enQuoteString(CON.ConCodCode)
        Return MyBase.GetData(Str)
    End Function
    Protected Function GetByERNCode(ByVal tHdrId As Integer, ByVal EarnCode As String) As DataSet
        Dim Str As String
        Str = " SELECT" & _
                " TrxLin_Id," & _
                " TrxHdr_Id," & _
                " TrxLin_Type," & _
                " ErnCod_Code," & _
                " DedCod_Code," & _
                " ConCod_Code," & _
                " TrxLin_PeriodValue," & _
                " TrxLin_YTDValue," & _
                " TrxLin_EDC," & _
                " TrxLin_EDCDescription," & _
                " TrxLin_ConsolDesc " & _
            "  FROM PrTxTrxnLines" & _
            "  WHERE TrxHdr_Id = " & tHdrId & _
            " AND ErnCod_Code=" & enQuoteString(EarnCode)
        Return MyBase.GetData(Str)
    End Function
    Protected Function GetByDEDCode(ByVal tHdrId As Integer, ByVal DEDCode As String) As DataSet
        Dim Str As String
        Str = " SELECT" & _
                " TrxLin_Id," & _
                " TrxHdr_Id," & _
                " TrxLin_Type," & _
                " ErnCod_Code," & _
                " DedCod_Code," & _
                " ConCod_Code," & _
                " TrxLin_PeriodValue," & _
                " TrxLin_YTDValue," & _
                " TrxLin_EDC," & _
                " TrxLin_EDCDescription," & _
                " TrxLin_ConsolDesc " & _
            "  FROM PrTxTrxnLines" & _
            "  WHERE TrxHdr_Id = " & tHdrId & _
            " AND DedCod_Code=" & enQuoteString(DEDCode)
        Return MyBase.GetData(Str)
    End Function
    Protected Function GetByCONCode(ByVal tHdrId As Integer, ByVal CONCode As String) As DataSet
        Dim Str As String
        Str = " SELECT" & _
                " TrxLin_Id," & _
                " TrxHdr_Id," & _
                " TrxLin_Type," & _
                " ErnCod_Code," & _
                " DedCod_Code," & _
                " ConCod_Code," & _
                " TrxLin_PeriodValue," & _
                " TrxLin_YTDValue," & _
                " TrxLin_EDC," & _
                " TrxLin_EDCDescription," & _
                " TrxLin_ConsolDesc " & _
            "  FROM PrTxTrxnLines" & _
            "  WHERE TrxHdr_Id = " & tHdrId & _
            " AND ConCod_Code=" & enQuoteString(CONCode)
        Return MyBase.GetData(Str)
    End Function
    Protected Function Save(ByVal _cPrTxTrxnLines As cPrTxTrxnLines) As Boolean
        Dim SpParams As New ArrayList
        Dim SpNames As New ArrayList
        Dim Flag As Boolean = False
        With _cPrTxTrxnLines
            SpParams.Add(.TrxLin_Id)                                         '(0)
            SpNames.Add("TrxLin_Id")                                         '(0)
            SpParams.Add(.TrxHdr_Id)                                         '(1)
            SpNames.Add("TrxHdr_Id")                                         '(1)
            SpParams.Add(.TrxLin_Type)                                       '(2)
            SpNames.Add("TrxLin_Type")                                       '(2)
            SpParams.Add(.ErnCod_Code)                                       '(3)
            SpNames.Add("ErnCod_Code")                                       '(3)
            SpParams.Add(.DedCod_Code)                                       '(4)
            SpNames.Add("DedCod_Code")                                       '(4)
            SpParams.Add(.ConCod_Code)                                       '(5)
            SpNames.Add("ConCod_Code")                                       '(5)
            SpParams.Add(.TrxLin_PeriodValue)                                '(6)
            SpNames.Add("TrxLin_PeriodValue")                                '(6)
            SpParams.Add(.TrxLin_YTDValue)                                   '(7)
            SpNames.Add("TrxLin_YTDValue")                                   '(7)
            SpParams.Add(.TrxLin_EDC)                                        '(8)
            SpNames.Add("TrxLin_EDC")                                        '(8)
            SpParams.Add(.TrxLin_EDCDescription)                             '(9)
            SpNames.Add("TrxLin_EDCDescription")                             '(9)
            SpParams.Add(.TrxLin_ConsolDesc)                                 '(10)
            SpNames.Add("TrxLin_ConsolDesc")                                 '(10)


        End With
        If Me.StoredProcedure("AG_PrTxTrxnLines_Save_Update", SpParams, SpNames) Then
            Return True
        Else
            Return False
        End If
    End Function
    Protected Function Delete(ByVal tTrxLin_Id As Integer, ByVal tTrxHdr_Id As Integer) As Boolean
        Dim Str As String
        Dim Flag As Boolean = True
        Dim Exx As New System.Exception
        Try
            BeginTransaction()
            Str = " DELETE FROM PrTxTrxnLines" & _
               " WHERE TrxLin_Id = " & tTrxLin_Id & " AND TrxHdr_Id = " & tTrxHdr_Id
            If MyBase.ExecuteNonQuery(Str) = -1 Then
                Throw Exx
            End If
            CommitTransaction()
        Catch ex As Exception
            Rollback()
            Utils.ShowException(ex)
            Flag = False
        End Try
        Return Flag
    End Function
    Protected Function CheckDeleteRecords(ByVal tCode As Integer) As DataSet
        Dim ds As DataSet
        '    Generation Note : 19/05/2008 16:05:29 :- No Foriegn Key Constraints where found
        ds = Nothing
        Return ds
    End Function
    Protected Function UpdateMyValues(ByVal _cPrTxTrxnLines As cPrTxTrxnLines) As Boolean
        Dim F As Boolean = False
        Dim Str As String
        Str = " Update PrTxTrxnLines " & _
        " Set TrxLin_PeriodValue=" & _cPrTxTrxnLines.TrxLin_PeriodValue & _
        " ,TrxLin_YTDValue=" & _cPrTxTrxnLines.TrxLin_YTDValue & _
        " ,TrxLin_EDC= " & _cPrTxTrxnLines.TrxLin_EDC & _
        " WHERE TrxHdr_Id = " & _cPrTxTrxnLines.TrxHdr_Id & _
        " AND TrxLin_Id = " & _cPrTxTrxnLines.TrxLin_Id
        Dim i As Integer
        i = MyBase.ExecuteNonQuery(Str)
        If i >= 0 Then
            F = True
        End If
        Return F

    End Function
End Class
