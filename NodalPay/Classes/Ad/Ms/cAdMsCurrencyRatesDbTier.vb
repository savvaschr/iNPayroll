' This Class has been autogenerated by Nodalsoft
' Do NOT adjust as it will be overwritten
' Generation Date : 13/02/2008 09:42:46
'
'
Public Class cAdMsCurrencyRatesDbTier
    '
    Inherits cDataTier
    '
    Protected Function GetByPK(ByVal tCurRte_id As Integer) As DataSet
        Dim Str As String
        Str = " SELECT" & _
                " CurRte_id," & _
                " Cur_AlphaCode," & _
                " CurRte_Rate," & _
                " CurRte_EffectiveDate," & _
                " CurRte_CreatedBy," & _
                " CurRte_CreationDate," & _
                " CurRte_AmendBy," & _
                " CurRte_AmendDate" & _
            "  FROM AdMsCurrencyRates" & _
            "  WHERE CurRte_id = " & tCurRte_id
        Return MyBase.GetData(Str)
    End Function
    Protected Function GetByCodeANDEffectiveDate(ByVal Code As String, ByVal EffectiveDate As Date) As DataSet
        Dim Str As String
        Dim EffectDate As String = Format(EffectiveDate, "yyyy-MM-dd")
        EffectDate = Utils.ChangeDateFormatForSearching(EffectDate)

        Str = "Select CurRte_id ," & _
            "Cur_AlphaCode ," & _
            "CurRte_Rate ," & _
            "CurRte_EffectiveDate ," & _
            "CurRte_CreatedBy ," & _
            "CurRte_CreationDate ," & _
            "CurRte_AmendBy ," & _
            " CurRte_AmendDate " & _
            " From AdMsCurrencyRates " & _
            " Where Cur_AlphaCode =" & Utils.enQuoteString(Code) & " and  CurRte_EffectiveDate = " & Utils.enQuoteString(EffectDate)
        Return MyBase.GetData(Str)
    End Function




    Protected Function Save(ByRef _cAdMsCurrencyRates As cAdMsCurrencyRates) As Boolean
        Dim SpParams As New ArrayList
        Dim SpNames As New ArrayList
        Dim Flag As Boolean = False
        With _cAdMsCurrencyRates
            SpParams.Add(.CurRte_id)                                         '(0)
            SpNames.Add("CurRte_id")                                         '(0)
            SpParams.Add(.AlphaCode)                                         '(1)
            SpNames.Add("Cur_AlphaCode")                                     '(1)
            SpParams.Add(.Rate)                                              '(2)
            SpNames.Add("CurRte_Rate")                                       '(2)
            SpParams.Add(.EffectiveDate)                                     '(3)
            SpNames.Add("CurRte_EffectiveDate")                              '(3)
            SpParams.Add(.CreatedBy)                                         '(4)
            SpNames.Add("CurRte_CreatedBy")                                  '(4)
            SpParams.Add(.CreationDate)                                      '(5)
            SpNames.Add("CurRte_CreationDate")                               '(5)
            SpParams.Add(.AmendBy)                                           '(6)
            SpNames.Add("CurRte_AmendBy")                                    '(6)
            SpParams.Add(.AmendDate)                                         '(7)
            SpNames.Add("CurRte_AmendDate")                                  '(7)
        End With
        SpNames.Add("NewId")                                             '(8)
        SpParams.Add(CInt(0))                                            '(8)
        If Me.StoredProcedure("AG_AdMsCurrencyRates_Save_Update", SpParams, SpNames, 8) Then
            If _cAdMsCurrencyRates.CurRte_id = 0 Then
                _cAdMsCurrencyRates.CurRte_id = DbNullToInt(SpParams(8))
            End If
            Return True
        Else
            Return False
        End If
    End Function
    Protected Function Delete(ByVal tCurRte_id As Integer) As Boolean
        Dim Str As String
        Dim Flag As Boolean = True
        Dim Exx As New System.Exception
        Try
            BeginTransaction()
            Str = " DELETE FROM AdMsCurrencyRates" & _
               " WHERE CurRte_id = " & tCurRte_id
            If MyBase.ExecuteNonQuery(Str) = -1 Then
                Throw Exx
            End If
            CommitTransaction()
        Catch ex As Exception
            Rollback()
            Utils.ShowException(ex)
            Flag = False
        End Try
        Return Flag
    End Function
    Protected Function CheckDeleteRecords(ByVal tCode As Integer) As DataSet
        Dim ds As DataSet
        '    Generation Note : 13/02/2008 09:42:46 :- No Foriegn Key Constraints where found
        ds = Nothing
        Return ds
    End Function
End Class
