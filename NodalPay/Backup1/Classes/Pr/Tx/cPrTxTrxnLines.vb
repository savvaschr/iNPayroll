' This Class has been autogenerated by Nodalsoft
' Do NOT adjust as it will be overwritten
' Generation Date : 19/05/2008 16:05:29
'
'
Public Class cPrTxTrxnLines
    '
    Inherits cPrTxTrxnLinesDbTier
    '
    Private mTrxLin_Id As Integer
    Private mTrxHdr_Id As Integer
    Private mTrxLin_Type As String
    Private mErnCod_Code As String
    Private mDedCod_Code As String
    Private mConCod_Code As String
    Private mTrxLin_PeriodValue As Double
    Private mTrxLin_YTDValue As Double
    Private mTrxLin_EDC As String
    Private mEDCDescription As String
    Private mConsolDesc As String

    Public Property TrxLin_Id() As Integer
        Get
            Return mTrxLin_Id
        End Get
        Set(ByVal Value As Integer)
            mTrxLin_Id = Value
        End Set
    End Property
    Public Property TrxHdr_Id() As Integer
        Get
            Return mTrxHdr_Id
        End Get
        Set(ByVal Value As Integer)
            mTrxHdr_Id = Value
        End Set
    End Property
    Public Property TrxLin_Type() As String
        Get
            Return mTrxLin_Type
        End Get
        Set(ByVal Value As String)
            mTrxLin_Type = Value
        End Set
    End Property
    Public Property ErnCod_Code() As String
        Get
            Return mErnCod_Code
        End Get
        Set(ByVal Value As String)
            mErnCod_Code = Value
        End Set
    End Property
    Public Property DedCod_Code() As String
        Get
            Return mDedCod_Code
        End Get
        Set(ByVal Value As String)
            mDedCod_Code = Value
        End Set
    End Property
    Public Property ConCod_Code() As String
        Get
            Return mConCod_Code
        End Get
        Set(ByVal Value As String)
            mConCod_Code = Value
        End Set
    End Property
    Public Property TrxLin_PeriodValue() As Double
        Get
            Return mTrxLin_PeriodValue
        End Get
        Set(ByVal Value As Double)
            mTrxLin_PeriodValue = Value
        End Set
    End Property
    Public Property TrxLin_YTDValue() As Double
        Get
            Return mTrxLin_YTDValue
        End Get
        Set(ByVal Value As Double)
            mTrxLin_YTDValue = Value
        End Set
    End Property
    Public Property TrxLin_EDC() As String
        Get
            Return mTrxLin_EDC
        End Get
        Set(ByVal value As String)
            mTrxLin_EDC = value
        End Set
    End Property
    Public Property TrxLin_EDCDescription() As String
        Get
            Return mEDCDescription
        End Get
        Set(ByVal value As String)
            mEDCDescription = value
        End Set
    End Property
    Public Property TrxLin_ConsolDesc() As String
        Get
            Return mConsolDesc
        End Get
        Set(ByVal value As String)
            mConsolDesc = value
        End Set
    End Property

    Public Sub New()
    End Sub
    Public Sub New(ByVal Dr As DataRow)
        If Not Dr Is Nothing Then
            LoadDataRow(Dr)
        End If
    End Sub
    Public Sub New(ByVal tTrxLin_Id As Integer, ByVal tTrxHdr_Id As Integer)
        If tTrxLin_Id <> 0 And tTrxHdr_Id <> 0 Then
            Init(tTrxLin_Id, tTrxHdr_Id)
        End If
    End Sub
    Public Sub New(ByVal tHdrId As Integer, ByVal Ern As cPrMsTemplateEarnings)
        Dim ds As DataSet
        ds = MyBase.GetByERN(tHdrId, Ern)
        If CheckDataSet(ds) Then
            LoadDataRow(ds.Tables(0).Rows(0))
        End If
    End Sub
    Public Sub New(ByVal tHdrId As Integer, ByVal Ded As cPrMsTemplateDeductions)
        Dim ds As DataSet
        ds = MyBase.GetByDED(tHdrId, Ded)
        If CheckDataSet(ds) Then
            LoadDataRow(ds.Tables(0).Rows(0))
        End If
    End Sub
    Public Sub New(ByVal tHdrId As Integer, ByVal Con As cPrMsTemplateContributions)
        Dim ds As DataSet
        ds = MyBase.GetByCON(tHdrId, Con)
        If CheckDataSet(ds) Then
            LoadDataRow(ds.Tables(0).Rows(0))
        End If
    End Sub
    Public Sub New(ByVal tHdrId As Integer, ByVal Code As String, ByVal Type As String)
        Dim ds As DataSet
        If Type = "E" Then
            ds = MyBase.GetByERNCode(tHdrId, Code)
            If CheckDataSet(ds) Then
                LoadDataRow(ds.Tables(0).Rows(0))
            End If
        ElseIf Type = "D" Then
            ds = MyBase.GetByDEDCode(tHdrId, Code)
            If CheckDataSet(ds) Then
                LoadDataRow(ds.Tables(0).Rows(0))
            End If
        ElseIf Type = "C" Then
            ds = MyBase.GetByCONCode(tHdrId, Code)
            If CheckDataSet(ds) Then
                LoadDataRow(ds.Tables(0).Rows(0))
            End If
        End If
    End Sub

    Private Sub Init(ByVal tTrxLin_Id As Integer, ByVal tTrxHdr_Id As Integer)
        Try
            Dim ds As DataSet
            ds = MyBase.GetByPK(tTrxLin_Id, tTrxHdr_Id)
            If CheckDataSet(ds) Then
                LoadDataRow(ds.Tables(0).Rows(0))
            End If
        Catch ex As System.Exception
        End Try
    End Sub
    Private Sub LoadDataRow(ByVal dr As DataRow)
        mTrxLin_Id = DbNullToInt(dr.Item(0))
        mTrxHdr_Id = DbNullToInt(dr.Item(1))
        mTrxLin_Type = DbNullToString(dr.Item(2))
        mErnCod_Code = DbNullToString(dr.Item(3))
        mDedCod_Code = DbNullToString(dr.Item(4))
        mConCod_Code = DbNullToString(dr.Item(5))
        mTrxLin_PeriodValue = DbNullToDouble(dr.Item(6))
        mTrxLin_YTDValue = DbNullToDouble(dr.Item(7))
        mTrxLin_EDC = DbNullToDouble(dr.Item(8))
        mEDCDescription = DbNullToString(dr.Item(9))
        mConsolDesc = DbNullToString(dr.Item(10))
    End Sub
    Public Shadows Function Delete(ByVal tTrxLin_Id As Integer, ByVal tTrxHdr_Id As Integer) As Boolean
        Try
            Dim Counter As Integer
            Dim TableCount As Integer
            Dim RecordCount As Integer
            Dim TransStr As String = ""
            Dim ds As DataSet
            ds = MyBase.CheckDeleteRecords(tTrxLin_Id)
            If CheckDataSet(ds) Then
                For Counter = 0 To ds.Tables.Count - 1
                    TableCount = TableCount + 1
                    RecordCount = RecordCount + DbNullToInt(ds.Tables(Counter).Rows(0).Item(0))
                    TransStr = TransStr & vbCrLf & "Table " & TableCount & "  Records " & RecordCount
                Next Counter
                If RecordCount = 0 Then
                    Return MyBase.Delete(tTrxLin_Id, tTrxHdr_Id)
                Else
                    MsgBox("Transactions Exist For This item - Can not Delete" & TransStr, MsgBoxStyle.Critical)
                End If
            Else
                MsgBox("Failed to confirm that no records exist for this item - Can not Delete")
                Return False
            End If
        Catch ex As System.Exception
        End Try
    End Function
    '
    Public Shadows Function Save() As Boolean
        Try
            Return MyBase.Save(Me)
        Catch ex As System.Exception
            Return False
        End Try
    End Function
    Public Shadows Function UpdateMyValues() As Boolean
        Try
            Return MyBase.UpdateMyValues(Me)
        Catch ex As System.Exception
            Return False
        End Try
    End Function
End Class

