' This Class has been autogenerated by Nodalsoft
' Do NOT adjust as it will be overwritten
' Generation Date : 17/03/2008 11:11:57
'
'
Public Class cPrMsPeriodCodes
    '
    Inherits cPrMsPeriodCodesDbTier
    '
    Private mCode As String
    Private mPrdGrpCode As String
    Private mStatus As String
    Private mPrdCod_Number As String
    Private mDescriptionL As String
    Private mDescriptionS As String
    Private mSequence As Integer
    Private mSinPrdCode As Integer
    Private mDateFrom As Date
    Private mDateTo As Date
    Private mPeriodUnits As Double
    Private mPayCat_Code As String
    Private mPeriodUnits2 As Double
    Public Property Code() As String
        Get
            Return mCode
        End Get
        Set(ByVal Value As String)
            mCode = Value
        End Set
    End Property
    Public Property PrdGrpCode() As String
        Get
            Return mPrdGrpCode
        End Get
        Set(ByVal Value As String)
            mPrdGrpCode = Value
        End Set
    End Property
    Public Property Status() As String
        Get
            Return mStatus
        End Get
        Set(ByVal Value As String)
            mStatus = Value
        End Set
    End Property
    Public Property PrdCod_Number() As String
        Get
            Return mPrdCod_Number
        End Get
        Set(ByVal Value As String)
            mPrdCod_Number = Value
        End Set
    End Property
    Public Property DescriptionL() As String
        Get
            Return mDescriptionL
        End Get
        Set(ByVal Value As String)
            mDescriptionL = Value
        End Set
    End Property
    Public Property DescriptionS() As String
        Get
            Return mDescriptionS
        End Get
        Set(ByVal Value As String)
            mDescriptionS = Value
        End Set
    End Property
    Public Property Sequence() As Integer
        Get
            Return mSequence
        End Get
        Set(ByVal Value As Integer)
            mSequence = Value
        End Set
    End Property
    Public Property SinPrdCode() As Integer
        Get
            Return mSinPrdCode
        End Get
        Set(ByVal Value As Integer)
            mSinPrdCode = Value
        End Set
    End Property
    Public Property DateFrom() As Date
        Get
            Return mDateFrom
        End Get
        Set(ByVal Value As Date)
            mDateFrom = Value
        End Set
    End Property
    Public Property DateTo() As Date
        Get
            Return mDateTo
        End Get
        Set(ByVal Value As Date)
            mDateTo = Value
        End Set
    End Property
    Public Property PeriodUnits() As Double
        Get
            Return mPeriodUnits
        End Get
        Set(ByVal Value As Double)
            mPeriodUnits = Value
        End Set
    End Property
    Public Property PayCat_Code() As String
        Get
            Return mPayCat_Code
        End Get
        Set(ByVal Value As String)
            mPayCat_Code = Value
        End Set
    End Property
    Public Property PeriodUnits2() As Double
        Get
            Return mPeriodUnits2
        End Get
        Set(ByVal Value As Double)
            mPeriodUnits2 = Value
        End Set
    End Property
    Public ReadOnly Property NumberOfNormalPeriods() As Integer
        Get
            Return MyBase.GetNumberOfNormalPeriods(Me)
        End Get
    End Property
    Public ReadOnly Property NumberOfNormalPeriodsUntilNow() As Integer
        Get
            Return MyBase.GetNumberOfNormalPeriodsUntilNow(Me)
        End Get
    End Property
    Public ReadOnly Property NumberOf_NOT_NormalPeriods() As Integer
        Get
            Return MyBase.GetNumberOf_NOT_NormalPeriods(Me)
        End Get
    End Property
    Public ReadOnly Property NumberOf_NOT_NormalPeriodsUntilNow() As Integer
        Get
            Return MyBase.GetNumberOf_NOT_NormalPeriodsUntilNow(Me)
        End Get
    End Property
    Public ReadOnly Property NumberOfTaxablePeriodsUntilNow() As Integer
        Get
            Return MyBase.GetNumberOfTaxablePeriodsUntilNow(Me)
        End Get
    End Property
    Public ReadOnly Property NumberOfTaxablePeriods() As Integer
        Get
            Return MyBase.GetNumberOfTaxable(Me)
        End Get
    End Property
    Public ReadOnly Property NumberOfNonTaxablePeriods() As Integer
        Get
            Return MyBase.GetNumberOfNonTaxable(Me)
        End Get
    End Property
    Public ReadOnly Property TOTALPeriods() As Integer
        Get
            Return MyBase.GetTOTALPeriods(Me)
        End Get
    End Property


    Public ReadOnly Property NumberOfTotalPeriods() As Integer
        Get
            Dim No As Integer
            No = Me.NumberOfTaxablePeriods + Me.NumberOfNonTaxablePeriods
            Return No
        End Get
    End Property
    Public ReadOnly Property NumberOfTaxablePeriodsFORDisplayONLY() As Integer
        Get
            Return MyBase.GetNumberOfTaxableFORDisplayONLY(Me)
        End Get
    End Property
    Public ReadOnly Property NumberOfNonTaxablePeriodsFORDisplayONLY() As Integer
        Get
            Return MyBase.GetNumberOfNonTaxableFORDisplayONLY(Me)
        End Get
    End Property

    Public ReadOnly Property NumberOfTotalPeriodsFORDisplayONLY() As Integer
        Get
            Return MyBase.GetNumberOfTotalPeriodsFORDisplayONLY(Me)
        End Get
    End Property
    Public ReadOnly Property NumberOfNotNormalPeriodsToCome() As Integer
        Get
            Return MyBase.GetNumberOfNotNormalPeriodsTocome(Me)
        End Get
    End Property
    Public Shadows ReadOnly Property RatioTotalPeriodsToWorkPeriods(ByVal Emp As cPrMsEmployees) As Double
        Get
            Return MyBase.RatioTotalPeriodsToWorkPeriods(Me, Emp)
        End Get
    End Property

    Public Shadows ReadOnly Property GetPreviousPeriod() As cPrMsPeriodCodes
        Get
            Return MyBase.GetPreviousPeriod(Me)
        End Get
    End Property

    Public Sub New()

    End Sub
    Public Sub New(ByVal Dr As DataRow)
        If Not Dr Is Nothing Then
            LoadDataRow(Dr)
        End If
    End Sub
    Public Sub New(ByVal tCode As String, ByVal tGroup As String)
        If tCode <> "" Then
            Init(tCode, tGroup)
        End If
    End Sub
    Private Sub Init(ByVal tCode As String, ByVal tGroup As String)
        Try
            Dim ds As DataSet
            ds = MyBase.GetByPK(tCode, tGroup)
            If CheckDataSet(ds) Then
                LoadDataRow(ds.Tables(0).Rows(0))
            End If
        Catch ex As System.Exception
        End Try
    End Sub
    Private Sub LoadDataRow(ByVal dr As DataRow)
        mCode = DbNullToString(dr.Item(0))
        mPrdGrpCode = DbNullToString(dr.Item(1))
        mPrdCod_Number = DbNullToString(dr.Item(2))
        mStatus = DbNullToString(dr.Item(3))
        mDescriptionL = DbNullToString(dr.Item(4))
        mDescriptionS = DbNullToString(dr.Item(5))
        mSequence = DbNullToInt(dr.Item(6))
        mSinPrdCode = DbNullToInt(dr.Item(7))
        mDateFrom = DbNullToDate(dr.Item(8))
        mDateTo = DbNullToDate(dr.Item(9))
        mPeriodUnits = DbNullToDouble(dr.Item(10))
        mPayCat_Code = DbNullToString(dr.Item(11))
        mPeriodUnits2 = DbNullToDouble(dr.Item(12))
    End Sub
    Public Shadows Function Delete(ByVal tCode As String) As Boolean
        Try
            Dim Counter As Integer
            Dim TableCount As Integer
            Dim RecordCount As Integer
            Dim TransStr As String = ""
            Dim ds As DataSet
            ds = MyBase.CheckDeleteRecords(tCode)
            If CheckDataSet(ds) Then
                For Counter = 0 To ds.Tables.Count - 1
                    TableCount = TableCount + 1
                    RecordCount = RecordCount + DbNullToInt(ds.Tables(Counter).Rows(0).Item(0))
                    TransStr = TransStr & vbCrLf & "Table " & TableCount & "  Records " & RecordCount
                Next Counter
                If RecordCount = 0 Then
                    Return MyBase.Delete(tCode)
                Else
                    MsgBox("Transactions Exist For This item - Can not Delete" & TransStr, MsgBoxStyle.Critical)
                End If
            Else
                MsgBox("Failed to confirm that no records exist for this item - Can not Delete")
                Return False
            End If
        Catch ex As System.Exception
        End Try
    End Function
    '
    Public Shadows Function Save() As Boolean
        Try
            Return MyBase.Save(Me)
        Catch ex As System.Exception
            Return False
        End Try
    End Function
    Public Overrides Function ToString() As String
        Return Me.Code & " - " & Me.DescriptionL
    End Function
End Class
