' This Class has been autogenerated by Nodalsoft
' Do NOT adjust as it will be overwritten
' Generation Date : 13/02/2008 09:42:50
'
'
Public Class cPrMsTemplateGroup
    '
    Inherits cPrMsTemplateGroupDbTier
    '
    Private mCode As String
    Private mPayTypCode As String
    Private mDescriptionL As String
    Private mDescriptionS As String
    Private mIsActive As String
    Private mDayUnits As Double
    Private mGLAnl1 As String
    Private mGLAnl2 As String
    Private mCompCode As String

    Public Property Code() As String
        Get
            Return mCode
        End Get
        Set(ByVal Value As String)
            mCode = Value
        End Set
    End Property
    Public Property PayTypCode() As String
        Get
            Return mPayTypCode
        End Get
        Set(ByVal Value As String)
            mPayTypCode = Value
        End Set
    End Property
    Public Property DescriptionL() As String
        Get
            Return mDescriptionL
        End Get
        Set(ByVal Value As String)
            mDescriptionL = Value
        End Set
    End Property
    Public Property DescriptionS() As String
        Get
            Return mDescriptionS
        End Get
        Set(ByVal Value As String)
            mDescriptionS = Value
        End Set
    End Property
    Public Property IsActive() As String
        Get
            Return mIsActive
        End Get
        Set(ByVal Value As String)
            mIsActive = Value
        End Set
    End Property
    Public Property DayUnits() As Double
        Get
            Return mDayUnits
        End Get
        Set(ByVal value As Double)
            mDayUnits = value
        End Set
    End Property
    Public Property GLAnl1() As String
        Get
            Return mGLAnl1
        End Get
        Set(ByVal value As String)
            mGLAnl1 = value
        End Set
    End Property
    Public Property GLAnl2() As String
        Get
            Return mGLAnl2
        End Get
        Set(ByVal value As String)
            mGLAnl2 = value
        End Set
    End Property
    Public Property CompanyCode() As String
        Get
            Return mCompCode
        End Get
        Set(ByVal value As String)
            mCompCode = value
        End Set
    End Property
    Public Sub New()
    End Sub
    Public Sub New(ByVal Dr As DataRow)
        If Not Dr Is Nothing Then
            LoadDataRow(Dr)
        End If
    End Sub
    Public Sub New(ByVal tCode As String)
        If tCode <> "" Then
            Init(tCode)
        End If
    End Sub
    Private Sub Init(ByVal tCode As String)
        Try
            Dim ds As DataSet
            ds = MyBase.GetByPK(tCode)
            If CheckDataSet(ds) Then
                LoadDataRow(ds.Tables(0).Rows(0))
            End If
        Catch ex As System.Exception
        End Try
    End Sub
    Private Sub LoadDataRow(ByVal dr As DataRow)
        mCode = DbNullToString(dr.Item(0))
        mPayTypCode = DbNullToString(dr.Item(1))
        mDescriptionL = DbNullToString(dr.Item(2))
        mDescriptionS = DbNullToString(dr.Item(3))
        mIsActive = DbNullToString(dr.Item(4))
        mDayUnits = DbNullToDouble(dr.Item(5))
        mGLAnl1 = DbNullToString(dr.Item(6))
        mGLAnl2 = DbNullToString(dr.Item(7))
        mCompCode = DbNullToString(dr.Item(8))
    End Sub
    Public Shadows Function Delete(ByVal tCode As String) As Boolean
        Try
            Dim Counter As Integer
            Dim TableCount As Integer
            Dim RecordCount As Integer
            Dim TransStr As String = ""
            Dim ds As DataSet
            ds = MyBase.CheckDeleteRecords(tCode)
            If CheckDataSet(ds) Then
                For Counter = 0 To ds.Tables.Count - 1
                    TableCount = TableCount + 1
                    RecordCount = RecordCount + DbNullToInt(ds.Tables(Counter).Rows(0).Item(0))
                    TransStr = TransStr & vbCrLf & "Table " & TableCount & "  Records " & RecordCount
                Next Counter
                If RecordCount = 0 Then
                    Return MyBase.Delete(tCode)
                Else
                    MsgBox("Transactions Exist For This item - Can not Delete" & TransStr, MsgBoxStyle.Critical)
                End If
            Else
                MsgBox("Failed to confirm that no records exist for this item - Can not Delete")
                Return False
            End If
        Catch ex As System.Exception
        End Try
    End Function
    '
    Public Shadows Function Save() As Boolean
        Try
            Return MyBase.Save(Me)
        Catch ex As System.Exception
            Return False
        End Try
    End Function
    Public Overrides Function ToString() As String
        Return Me.Code & " - " & Me.DescriptionL
    End Function
End Class
