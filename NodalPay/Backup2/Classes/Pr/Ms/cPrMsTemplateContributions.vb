' This Class has been autogenerated by Nodalsoft
' Do NOT adjust as it will be overwritten
' Generation Date : 13/02/2008 09:42:50
'
'
Public Class cPrMsTemplateContributions
    '
    Inherits cPrMsTemplateContributionsDbTier
    '
    Private mId As Integer
    Private mTemGrp_Code As String
    Private mConCodCode As String
    Private mDisplayName As String
    Private mIsDispalyed As String
    Private mSequence As String
    Private mTypeMode As String
    Private mFromMode As String
    Private mCreationDate As Date
    Private mCalcFormula As String
    Private mCreatedBy As Integer
    Private mAmendDate As Date
    Private mAmendBy As Integer
    Private mNavCreditAccount As String
    Private mNavDebitAccount As String
    Private mReportingSequence As Integer
    Public Property Id() As Integer
        Get
            Return mId
        End Get
        Set(ByVal Value As Integer)
            mId = Value
        End Set
    End Property
    Public Property TemGrp_Code() As String
        Get
            Return mTemGrp_Code
        End Get
        Set(ByVal Value As String)
            mTemGrp_Code = Value
        End Set
    End Property
    Public Property ConCodCode() As String
        Get
            Return mConCodCode
        End Get
        Set(ByVal Value As String)
            mConCodCode = Value
        End Set
    End Property
    Public Property DisplayName() As String
        Get
            Return mDisplayName
        End Get
        Set(ByVal Value As String)
            mDisplayName = Value
        End Set
    End Property
    Public Property IsDispalyed() As String
        Get
            Return mIsDispalyed
        End Get
        Set(ByVal Value As String)
            mIsDispalyed = Value
        End Set
    End Property
    Public Property Sequence() As String
        Get
            Return mSequence
        End Get
        Set(ByVal Value As String)
            mSequence = Value
        End Set
    End Property
    Public Property TypeMode() As String
        Get
            Return mTypeMode
        End Get
        Set(ByVal Value As String)
            mTypeMode = Value
        End Set
    End Property
    Public Property FromMode() As String
        Get
            Return mFromMode
        End Get
        Set(ByVal Value As String)
            mFromMode = Value
        End Set
    End Property
    Public Property CreationDate() As Date
        Get
            Return mCreationDate
        End Get
        Set(ByVal Value As Date)
            mCreationDate = Value
        End Set
    End Property
    Public Property CalcFormula() As String
        Get
            Return mCalcFormula
        End Get
        Set(ByVal Value As String)
            mCalcFormula = Value
        End Set
    End Property
    Public Property CreatedBy() As Integer
        Get
            Return mCreatedBy
        End Get
        Set(ByVal Value As Integer)
            mCreatedBy = Value
        End Set
    End Property
    Public Property AmendDate() As Date
        Get
            Return mAmendDate
        End Get
        Set(ByVal Value As Date)
            mAmendDate = Value
        End Set
    End Property
    Public Property AmendBy() As Integer
        Get
            Return mAmendBy
        End Get
        Set(ByVal Value As Integer)
            mAmendBy = Value
        End Set
    End Property
    Public Property ConsolDesc() As String
        Get
            Return mNavCreditAccount
        End Get
        Set(ByVal value As String)
            mNavCreditAccount = value
        End Set
    End Property
    Public Property NavDebitAccount() As String
        Get
            Return mNavDebitAccount
        End Get
        Set(ByVal value As String)
            mNavDebitAccount = value
        End Set
    End Property
    Public Property ReportingSequence() As Integer
        Get
            Return mReportingSequence
        End Get
        Set(ByVal value As Integer)
            mreportingsequence = value
        End Set
    End Property
    Public Sub New()
    End Sub
    Public Sub New(ByVal tTemplateGroupCode As String, ByVal tContributionCode As String)
        Try
            Dim ds As DataSet
            ds = MyBase.GetByIndex(tTemplateGroupCode, tContributionCode)
            If CheckDataSet(ds) Then
                LoadDataRow(ds.Tables(0).Rows(0))
            End If
        Catch ex As System.Exception
        End Try

    End Sub
    Public Sub New(ByVal Dr As DataRow)
        If Not Dr Is Nothing Then
            LoadDataRow(Dr)
        End If
    End Sub
    Public Sub New(ByVal tId As Integer)
        If tId <> 0 Then
            Init(tId)
        End If
    End Sub
    Private Sub Init(ByVal tId As Integer)
        Try
            Dim ds As DataSet
            ds = MyBase.GetByPK(tId)
            If CheckDataSet(ds) Then
                LoadDataRow(ds.Tables(0).Rows(0))
            End If
        Catch ex As System.Exception
        End Try
    End Sub
    Private Sub LoadDataRow(ByVal dr As DataRow)
        mId = DbNullToInt(dr.Item(0))
        mTemGrp_Code = DbNullToString(dr.Item(1))
        mConCodCode = DbNullToString(dr.Item(2))
        mDisplayName = DbNullToString(dr.Item(3))
        mIsDispalyed = DbNullToString(dr.Item(4))
        mSequence = DbNullToString(dr.Item(5))
        mTypeMode = DbNullToString(dr.Item(6))
        mFromMode = DbNullToString(dr.Item(7))
        mCreationDate = DbNullToDate(dr.Item(8))
        mCalcFormula = DbNullToString(dr.Item(9))
        mCreatedBy = DbNullToInt(dr.Item(10))
        mAmendDate = DbNullToDate(dr.Item(11))
        mAmendBy = DbNullToInt(dr.Item(12))
        mNavCreditAccount = DbNullToString(dr.Item(13))
        mNavDebitAccount = DbNullToString(dr.Item(14))
        mReportingSequence = DbNullToInt(dr.Item(15))
    End Sub
    Public Shadows Function Delete(ByVal tId As Integer) As Boolean
        Try
            Dim Counter As Integer
            Dim TableCount As Integer
            Dim RecordCount As Integer
            Dim TransStr As String = ""
            Dim ds As DataSet
            ds = MyBase.CheckDeleteRecords(tId)
            If CheckDataSet(ds) Then
                For Counter = 0 To ds.Tables.Count - 1
                    TableCount = TableCount + 1
                    RecordCount = RecordCount + DbNullToInt(ds.Tables(Counter).Rows(0).Item(0))
                    TransStr = TransStr & vbCrLf & "Table " & TableCount & "  Records " & RecordCount
                Next Counter
                If RecordCount = 0 Then
                    Return MyBase.Delete(tId)
                Else
                    MsgBox("Transactions Exist For This item - Can not Delete" & TransStr, MsgBoxStyle.Critical)
                End If
            Else
                MsgBox("Failed to confirm that no records exist for this item - Can not Delete")
                Return False
            End If
        Catch ex As System.Exception
        End Try
    End Function
    '
    Public Shadows Function Save() As Boolean
        Try
            Return MyBase.Save(Me)
        Catch ex As System.Exception
            Return False
        End Try
    End Function
End Class
